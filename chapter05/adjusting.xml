<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-adjusting">
  <?dbhtml filename="adjusting.html"?>

  <title>Ajustar las herramientas</title>

  <para>Ahora que se han instalado las librerías de C temporales, todas las
  herramientas que compilemos en el resto de este capítulo deberían enlazarse
  contra ellas. Para conseguirlo, deben ajustarse el enlazador y el fichero
  specs del compilador.</para>

  <para>El enlazador, que se ajustó al final del primer paso de Binutils,
  se instala ejecutando el siguiente comando desde el directorio
  <filename class="directory">binutils-build</filename>:</para>

<screen><userinput>make -C ld install</userinput></screen>

  <para>Desde ahora todo se enlazará solamente contra las librerías que hay en
  <filename class="directory">/tools/lib</filename>.</para>

  <note>
    <para>Si por alguna razón olvidaste el aviso sobre conservar los directorios
    de las fuentes y de construcción del primer paso de Binutils, ignora el
    comando anterior. El resultado es la pequeña pega de que los siguientes
    programas de pruebas se enlazarán contra las librerías del anfitrión. Esto
    no es lo ideal, pero no es un gran problema. La situación se corregirá
    cuando instalemos un poco más adelante la segunda fase de Binutils.</para>
  </note>

  <para>Ahora que se ha instalado el enlazador ajustado, debes eliminar los
  directorios de las fuentes y de construcción de Binutils.</para>

  <para>Lo siguiente esapuntar GCC al nuevo enlazador dinámico. Esto se hace
  volcando el fichero <quote>specs</quote>de GCC a un lugar en el que GCC lo
  busque por defecto. Entonces una simple sustitución <command>sed</command>
  altera el enlazdor inámic que GCC usará:</para>

<!-- Ampersands are needed to allow cut and paste -->
<screen><userinput>SPECFILE=`dirname $(gcc -print-libgcc-file-name)`/specs &amp;&amp;
gcc -dumpspecs > $SPECFILE &amp;&amp;
sed 's@^/lib/ld-linux.so.2@/tools&amp;@g' $SPECFILE &gt; tempspecfile &amp;&amp;
mv -vf tempspecfile $SPECFILE &amp;&amp;
unset SPECFILE</userinput></screen>

  <para><phrase condition="html">Recomendamos que copies y pegues lo anterior
  para asegurar que no hay errores.</phrase> Alternativamente, puedes editar el
  fichero specs a mano si quieres. Esto se hace reemplazando cada aparición de
  <quote>/lib/ld-linux.so.2</quote> con <quote>/tools/lib/ld-linux.so.2</quote>.</para>

  <para>Asegúrate de revisar visualmente el fichero specs para
  verificar que se han hecho los cambios deseados.</para>

  <important>
    <para>Si estás trabajando sobre una plataforma en la que el nombre del
    enlazador dinámico no es <filename class="libraryfile">ld-linux.so.2</filename>,
    en el anterior comando debes sustituir <filename>ld-linux.so.2</filename> con
    el nombre del enlazador dinámico de tu plataforma. En caso necesario consulta
    la <xref linkend="ch-tools-toolchaintechnotes"/>.</para>
  </important>

  <para>Durante el proceso de construcción, GCC ejecuta un guión
  (<command>fixincludes</command>) que explora el sistema buscando ficheros de
  cabecera que puedan necesitar ser corregidos (que pueden contener errores de
  sintaxis, por ejemplo), e instala las versiones corregidas en un directorio
  privado. Existe la posibilidad de que, como resultado de este proceso, algunos
  ficheros de cabecera del sistema anfitrión se hayan colado dentro de dicho
  directorio privado de cabeceras de GCC. Como el resto de este capítulo sólo
  necesita las cabeceras de GCC y Glibc, que ya han sido instaladas, cualquier
  cabecera <quote>fijada</quote> puede borrarse sin problemas. Esto ayuda a
  evitar que cualquier cabecera del anfitrión contamine el entorno de
  construcción. Ejecuta los siguientes comandos para eliminr dichos ficheros de
  cabecera (puede que encuentres más facil copiar y pegar estos comandos en vez
  de teclearlos, debido a su longitud):</para>

<!-- && used to ease copy and pasting -->
<screen><userinput>GCC_INCLUDEDIR=`dirname $(gcc -print-libgcc-file-name)`/include &amp;&amp;
find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &amp;&amp;
rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &amp;&amp;
unset GCC_INCLUDEDIR</userinput></screen>

  <caution>
    <para>En este punto es obligatorio parar y asegurarse de que las operaciones
    básicas (compilación y enlazado) de las nuevas herramientas funcionan como
    se espera. Para esto vamos a hacer una simple comprobación:</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>Si todo funciona correctamente, no debe haber errores y la salida del
    último comando debe ser:</para>

<screen><computeroutput>[Requesting program interpreter:
    /tools/lib/ld-linux.so.2]

[Intérprete de programa solicitado:
    /tools/lib/ld-linux.so.2]</computeroutput></screen>

    <para>Confirma que <filename class="directory">/tools/lib</filename>
    aparezca como el prefijo de tu enlazador dinámico.</para>

    <para>Si no recibes una salida como la mostrada arriba, o no hay salida
    alguna, algo está seriamente mal. Investiga y revisa tus pasos para
    encontrar el problema y corregirlo. El problema debe resolverse antes de
    continuar. Primero, repite la comprobación de sanidad usando
    <command>gcc</command> en vez de <command>cc</command>. Si esto funciona
    significa que falta el enlace simbólico <filename
    class="symlink">/tools/bin/cc</filename>. Vuelve a la <xref
    linkend="ch-tools-gcc-pass1"/> e instala el enlace simbólico. Seguidamente,
    asegúrate de que tu <envar>PATH</envar> es correcto. Puedes comprobarlo
    ejecutando <command>echo $PATH</command> y verificando que <filename
    class="directory">/tools/bin</filename> está en cabeza de la lista. Si
    el <envar>PATH</envar> está mal puede significar que no has ingresado
    como usuario <systemitem class="username">lfs</systemitem> o que algo
    salió mal en la <xref linkend="ch-tools-settingenviron"/>. Otra opción es
    que algo pudo ir mal en el anterior arreglo del fichero specs. En este caso,
    repite el arreglo del fichero<phrase condition="html"> asegurándote de
    copiar y pegar los comandos como se recomendó</phrase>.</para>

    <para>Cuando todo esté bien, borra los ficheros de prueba:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

    <para>La construcción de TCL en la siguiente sección servirá como comprobación
    adicional de que las herramientas se han construido correctamente. Si la
    construcción de TCL falla, esto es una indicación de que algo fué mal durante
    la instalación de Binutils, GCC o Glibc, pero no con el propio TCL.</para>
  </caution>

</sect1>
