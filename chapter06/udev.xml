<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-system-udev" role="wrap">
<title>Udev-&udev-version;</title>
<?dbhtml filename="udev.html"?>

<indexterm zone="ch-system-udev"><primary sortas="a-Udev">Udev</primary></indexterm>

<sect2 role="package"><title/>
<para>The Udev package contains programs for dynamic creation of device nodes.</para>

<segmentedlist>
<segtitle>&buildtime;</segtitle>
<segtitle>&diskspace;</segtitle>
<seglistitem><seg>0.2 SBU</seg><seg>5.2 MB</seg></seglistitem>
</segmentedlist>

</sect2>

<sect2 role="installation">
<title>Installation of Udev</title>

<para>Compile Udev:</para>

<screen><userinput>make udevdir=/dev</userinput></screen>

<variablelist>
<varlistentry>
<term><parameter>udevdir=/dev</parameter></term>
<listitem><para>This tells <command>udev</command> which directory it is to
create device nodes in.</para></listitem>
</varlistentry>
</variablelist>

<para>Install it:</para>

<screen><userinput>make udevdir=/dev install</userinput></screen>

<para>Udev's configuration is far from ideal by default, so we install our own
configuration files here:</para>

<screen><userinput>cp ../udev-config-2.permissions /etc/udev/permissions.d/25-lfs.permissions
cp ../udev-config-1.rules /etc/udev/rules.d/25-lfs.rules</userinput></screen>

<para>Finally, we'll allow udev to create the full compliment of device 
nodes, since earlier we only created a minimal set.</para>

<screen><userinput>/sbin/udevstart</userinput></screen>

</sect2>


<sect2 id="contents-udev" role="content"><title>Contents of Udev</title>

<segmentedlist>
<segtitle>Installed programs</segtitle>
<seglistitem><seg>udev, udevd, udevsend, udevstart, udevinfo, udevtest</seg></seglistitem>
</segmentedlist>

<variablelist><title>Short descriptions</title>
                                                                                
<varlistentry id="udev">
<term><command>udev</command></term>
<listitem><indexterm zone="ch-system-udev udev"><primary
sortas="b-udev">udev</primary></indexterm>
<para>is used to create device nodes in <filename
class="directory">/dev</filename> or to rename network interfaces (not in LFS)
in response to hotplug events.</para>
</listitem></varlistentry>

<varlistentry id="udevd">
<term><command>udevd</command></term>
<listitem> <indexterm zone="ch-system-udev udevd"><primary
sortas="b-udevd">udevd</primary></indexterm>
<para>is a daemon that reorders hotplug events before submitting them to
<command>udev</command>,
thus avoiding various race conditions.</para>
</listitem></varlistentry>

<varlistentry id="udevsend">
<term><command>udevsend</command></term>
<listitem> <indexterm zone="ch-system-udev udevsend"><primary
sortas="b-udevsend">udevsend</primary></indexterm>
<para>is used to deliver hotplug events to <command>udevd</command>.</para>
</listitem></varlistentry>

<varlistentry id="udevstart">
<term><command>udevstart</command></term>
<listitem> <indexterm zone="ch-system-udev udevstart"><primary
sortas="b-udevstart">udevstart</primary></indexterm>
<para>is used to create device nodes in <filename
class="directory">/dev</filename> that correspond to drivers compiled directly
into the kernel. It performs that task by simulating hotplug events presumably
dropped by the kernel before invocation of this program (e.g. because the root
filesystem has not been mounted) and submitting such synthetic hotplug events
to <command>udev</command>.</para>
</listitem>
</varlistentry>

<varlistentry id="udevinfo">
<term><command>udevinfo</command></term>
<listitem> <indexterm zone="ch-system-udev udevinfo"><primary
sortas="b-udevinfo">udevinfo</primary></indexterm>
<para>allows users to query the <command>udev</command> database for
information on any device currently present on the system. It also
provides a way to query any device in the sysfs tree to help creating udev
rules.</para>
</listitem></varlistentry>

<varlistentry id="udevtest">
<term><command>udevtest</command></term>
<listitem> <indexterm zone="ch-system-udev udevtest"><primary
sortas="b-udevtest">udevtest</primary></indexterm>
<para>simulates a <command>udev</command> run for the given device,
and prints out the name of the node the real <command>udev</command> would
have created, or (not in LFS) the name of the renamed network interface.</para>
</listitem></varlistentry>

<varlistentry id="etc-dev-d">
<term><filename class="directory">/etc/dev.d</filename></term>
<listitem> <indexterm zone="ch-system-udev etc-dev-d"><primary
sortas="e-etc-dev-d">/etc/dev.d</primary></indexterm>
<para>directory is supposed to contain user-written handlers for device
creation hotplug events.</para>
</listitem></varlistentry>

<varlistentry id="etc-udev">
<term><filename class="directory">/etc/udev</filename></term>
<listitem> <indexterm zone="ch-system-udev etc-udev"><primary
sortas="e-etc-udev">/etc/udev</primary></indexterm>
<para>directory contains <command>udev</command> configuration files,
device permissions and rules for device naming.</para>
</listitem></varlistentry>
</variablelist>
</sect2>

</sect1>
